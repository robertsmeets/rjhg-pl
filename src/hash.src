class hashtable 
{
    a,claimed,filled
}


proc main(a)
{
   h = hashtable();
   h.init();
   h.add("one",1);
   h.add("two",2);
   h.add("three",3);
   h.add("four",4);
   h.add("five",5);
   h.add("six",6);
   h.add("seven",7);
   h.add("eight",8);
   h.add("nine",9);
   h.add("ten",10);
   h.add("eleven",11);
   h.add("twelve",12);
   h.add("thirteen",13);
   h.add("fourteen",14);
   h.add("fifteen",15);
   h.add("sixteen",16);
   h.add("seventeen",17);
   h.add("eighteen",18);
   h.add("nineteen",19);
   h.add("twenty",20);
   print h.get("one");
   print h.get("two");
   print h.get("three");
   print h.get("four");
   print h.get("five");
   print h.get("six");
   print h.get("seven");
   print h.get("eight");
   print h.get("nine");
   print h.get("ten");
   print h.get("eleven");
   print h.get("twelve");
   print h.get("thirteen");
   print h.get("fourteen");
   print h.get("fifteen");
   print h.get("sixteen");
   print h.get("seventeen");
   print h.get("eighteen");
   print h.get("nineteen");
   print h.get("twenty");
}

class helement
{
   key, value, next
}

method helement.setKey(k)
{
   key = k;
}

method helement.setValue(v)
{
   value  = v;
}

method helement.setNext(e)
{
   next = e;
}

method helement.getKey()
{
   return key;
}

method helement.getNext()
{
   return next;
}

method helement.getValue()
{
   return value;
}

method hashtable.add(k,v)
{
    hk = self.f(k);
    e = helement();
    e.setKey(k);
    e.setValue(v);
    e.setNext(null);
    element = a[hk];
    if (element == null)
    {
       a.set(hk,e);
    }
    else
    {
       e.setNext(element);
       a.set(hk,e);
    };
    self.printme();
}

method hashtable.printme()
{
    print "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa";
    i = 0;
    while i < claimed
    {
       element = a[i];
       print "before comparison";
       while element != null
       {
           print "after comparison";
           print "INDEX "+i + " ELEMENT "+ element +" KEY "  + element.getKey() +  " VALUE " + element.getValue() + " NEXT " + element.getNext();
           print "before element "+element;
           element = element.getNext();
           print "after element"
       };
       print "bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb" + i;
       i = i + 1;
    }
     
}

method hashtable.init()
{
   a = array();
   a.add(null);
   a.add(null);
   a.add(null);
   a.add(null);
   a.add(null);
   claimed=5;
   filled=0;
}

/**
 *
 * calculate a hash value for a string
 *
 **/
method hashtable.f(x)
{
   hash = 5381;
   sz = x.size(); 
   i = 0;
   while (i < sz)
   {
      c = x[i];
      hash = hash * 33 + c;
      i = i + 1;
   };
   return hash % claimed;
}

method hashtable.get(k)
{
   hk = self.f(k);
   element = a[hk];
   while (element != null)
   {
      if element.getKey() == k { return element.getValue(); };
      element = element.getNext(); 
   };
   return null;
}
