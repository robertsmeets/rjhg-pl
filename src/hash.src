class hashtable 
{
    a,claimed,filled
}


proc main(a)
{
   print "lllllllllllllllllllllllllllllllllONE";
   h = hashtable();
   print "lllllllllllllllllllllllllllllllllxxx";
   h.init();
   print "lllllllllllllllllllllllllllllllllTWO";
   h.add("one",1);
   print "lllllllllllllllllllllllllllllllllTHREE";
   h.add("two",2);
   print "lllllllllllllllllllllllllllllllllFOUR";
   h.add("three",3);
   print "lllllllllllllllllllllllllllllllllFIVE";
   print h.get("one");
   print h.get("two");
   print h.get("three");
}

class helement
{
   key, value, next
}

method helement.setKey(k)
{
   key = k;
}

method helement.setValue(v)
{
   value  = v;
}

method helement.setNext(e)
{
   next = e;
}

method hashtable.add(k,v)
{
    print "ADDING1";
    hk = self.f(k);
    print "AFTER SELF1";
    element = a[hk];
    print "AFTER SELF2";
    e = helement();
    print "AFTER SELF3";
    e.setKey(hk);
    print "AFTER SELF4";
    e.setValue(v);
    print "AFTER SELF5";
    if (element == null)
    {
    print "AFTER SELF6";
       a.set(hk,e);
    }
    else
    {
    print "AFTER SELF7";
       element.setNext(e);
    };
    print "AFTER SELF8";
}

method hashtable.init()
{
   print "INITING";
   a = array();
   a.add(null);
   a.add(null);
   a.add(null);
   a.add(null);
   a.add(null);
   claimed=5;
   filled=0;
   print "done INITING";
}

method hashtable.f(x)
{
   y = (37 * x) % claimed;
   return y;
}

method hashtable.get(k)
{
   hk = self.f(k);
   element = a[hk];
   while ((element.getKey() != k) && (element.getNext() != null))
   {
      element = element.getNext(); 
   };
   return element;
}
