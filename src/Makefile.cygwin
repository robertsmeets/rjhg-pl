.PHONY: clean
.PHONY: test

#
# add -DDEBUG for debug
#
#CFLAGS=-std=c++11 -g -I../dyncall-0.8_linux/include -DDEBUG 
CFLAGS=-std=c++11 -g -I../dyncall-0.8_win/include -DDEBUG
#CFLAGS=-std=c++11 -DDEBUG -I../dyncall-0.8_win/include -s -Os -m32 -fno-exceptions -fno-rtti -fno-stack-protector -fomit-frame-pointer -ffunction-sections -fdata-sections -Wl,--gc-sections  -mpreferred-stack-boundary=2 -falign-functions=1 -falign-jumps=1 -falign-loops=1 -fno-math-errno -fno-unroll-loops -fmerge-all-constants -fno-ident -Wl,-z,norelro -Wl,--hash-style=gnu -Wl,--build-id=none 
#-fshort-double -fsingle-precision-constant 
#-mfpmath=387 -mfancy-math-387 
#-ffast-math 
 
myparser.exe: myparser.lex.o myparser.y.o Assignment.o ReturnNode.o While.o If.o CommaSeparated.o MethodCall.o Expression.o ExpressionList.o LitBool.o LitNull.o Literal.o LitFloat.o LitInt.o LitString.o ClassDefinition.o ProcedureNode.o ProgramNode.o ProcedureCall.o SingleMethodCall.o Statements.o Val2Expression.o VariableValue.o CodeGenerator.o Disassembler.o DebugInfo.o PrintNode.o CInterpreter.o HeapManager.o CFunctions.o Extern.o
	g++ -L"../dyncall-0.8_win/lib" -g -o myparser.exe myparser.lex.o myparser.y.o Assignment.o ReturnNode.o While.o If.o CommaSeparated.o MethodCall.o Expression.o ExpressionList.o LitBool.o LitNull.o Literal.o LitFloat.o LitInt.o LitString.o ClassDefinition.o ProcedureNode.o ProgramNode.o ProcedureCall.o SingleMethodCall.o Statements.o Val2Expression.o VariableValue.o CodeGenerator.o Disassembler.o DebugInfo.o PrintNode.o CInterpreter.o HeapManager.o CFunctions.o Extern.o -llibdyncall_s -llibdynload_s 
#	strip myparser.exe
#	/cygdrive/d/upx391w/upx.exe myparser.exe

# add -v -t for debug

y.tab.c y.tab.h: myparser.y
	byacc -d -v -t myparser.y

# 
# Some functions go beyond the ANSI standard. These are disabled when you use std=c++11 (or std=c++0x).
# 
# Among them are fdopen, fileno and strdup. There are two possibilities to use them:
# 
#     Use the GNU dialect (std=gnu++11).
#    If you want to compile without dialect and make a local exception, you can include stdio.h with the __STRICT_ANSI__ undefined. (see: Error "'fdopen' was not declared" found with g++ 4 that compiled with g++3)
#
	
myparser.lex.o: myparser.lex.c y.tab.h
	g++ -std=gnu++11 -g -I../dyncall-0.8_win/include -o myparser.lex.o -c myparser.lex.c

myparser.y.o: y.tab.c
	g++ -Wno-write-strings $(CFLAGS) -c y.tab.c -o myparser.y.o

myparser.lex.c: myparser.lex
	flex myparser.lex
	cat lex.yy.c | sed s/malloc\(strlen/\(char*\)malloc\(strlen/g >myparser.lex.c

Disassembler.o: Disassembler.h Disassembler.cpp
	g++ $(CFLAGS) -o Disassembler.o -c Disassembler.cpp

PrintNode.o: PrintNode.h PrintNode.cpp
	g++ $(CFLAGS) -o PrintNode.o -c PrintNode.cpp

DebugInfo.o: DebugInfo.h DebugInfo.cpp
	g++ $(CFLAGS) -o DebugInfo.o -c DebugInfo.cpp

Assignment.o: Assignment.h Assignment.cpp
	g++ $(CFLAGS) -o Assignment.o -c Assignment.cpp

ReturnNode.o: ReturnNode.h ReturnNode.cpp
	g++ $(CFLAGS) -o ReturnNode.o -c ReturnNode.cpp

While.o: While.h While.cpp
	g++ $(CFLAGS) -o While.o -c While.cpp

If.o: If.h If.cpp
	g++ $(CFLAGS) -o If.o -c If.cpp

CommaSeparated.o: CommaSeparated.h CommaSeparated.cpp
	g++ $(CFLAGS) -o CommaSeparated.o -c CommaSeparated.cpp

MethodCall.o: MethodCall.h MethodCall.cpp
	g++ $(CFLAGS) -o MethodCall.o -c MethodCall.cpp

Expression.o: Expression.h Expression.cpp
	g++ $(CFLAGS) -o Expression.o -c Expression.cpp

ExpressionList.o: ExpressionList.h ExpressionList.cpp
	g++ $(CFLAGS) -o ExpressionList.o -c ExpressionList.cpp

LitBool.o: LitBool.h LitBool.cpp
	g++ $(CFLAGS) -o LitBool.o -c LitBool.cpp

LitNull.o: LitNull.h LitNull.cpp
	g++ $(CFLAGS) -o LitNull.o -c LitNull.cpp

Literal.o: Literal.h Literal.cpp
	g++ $(CFLAGS) -o Literal.o -c Literal.cpp

LitFloat.o: LitFloat.h LitFloat.cpp
	g++ $(CFLAGS) -o LitFloat.o -c LitFloat.cpp

LitInt.o: LitInt.h LitInt.cpp
	g++ $(CFLAGS) -o LitInt.o -c LitInt.cpp

LitString.o: LitString.h LitString.cpp
	g++ $(CFLAGS) -o LitString.o -c LitString.cpp

ClassDefinition.o: ClassDefinition.h ClassDefinition.cpp
	g++ $(CFLAGS) -o ClassDefinition.o -c ClassDefinition.cpp

ProcedureNode.o: ProcedureNode.h ProcedureNode.cpp
	g++ $(CFLAGS) -o ProcedureNode.o -c ProcedureNode.cpp

ProgramNode.o: ProgramNode.h ProgramNode.cpp
	g++ $(CFLAGS) -o ProgramNode.o -c ProgramNode.cpp

ProcedureCall.o: ProcedureCall.h ProcedureCall.cpp
	g++ $(CFLAGS) -o ProcedureCall.o -c ProcedureCall.cpp

SingleMethodCall.o: SingleMethodCall.h SingleMethodCall.cpp
	g++ $(CFLAGS) -o SingleMethodCall.o -c SingleMethodCall.cpp

Statements.o: Statements.h Statements.cpp
	g++ $(CFLAGS) -o Statements.o -c Statements.cpp

Val2Expression.o: Val2Expression.h Val2Expression.cpp
	g++ $(CFLAGS) -o Val2Expression.o -c Val2Expression.cpp

VariableValue.o: VariableValue.h VariableValue.cpp
	g++ $(CFLAGS) -o VariableValue.o -c VariableValue.cpp

CodeGenerator.o: CodeGenerator.h CodeGenerator.cpp
	g++ $(CFLAGS) -o CodeGenerator.o -c CodeGenerator.cpp

CInterpreter.o: CInterpreter.h CInterpreter.cpp
	g++ $(CFLAGS) -o CInterpreter.o -c CInterpreter.cpp

HeapManager.o: HeapManager.h HeapManager.cpp
	g++ $(CFLAGS) -o HeapManager.o -c HeapManager.cpp

CFunctions.o: CFunctions.h CFunctions.cpp
	g++ $(CFLAGS) -o CFunctions.o -c CFunctions.cpp

Extern.o: Extern.h Extern.cpp
	g++ $(CFLAGS) -o Extern.o -c Extern.cpp


clean:
	rm -f Extern.o
	rm -f CodeGenerator.o
	rm -f Assignment.o
	rm -f ReturnNode.o
	rm -f While.o
	rm -f If.o
	rm -f CommaSeparated.o
	rm -f MethodCall.o
	rm -f Expression.o
	rm -f ExpressionList.o
	rm -f LitBool.o
	rm -f LitNull.o
	rm -f Literal.o
	rm -f LitFloat.o
	rm -f LitInt.o
	rm -f LitString.o
	rm -f ClassDefinition.o
	rm -f ProcedureNode.o
	rm -f ProgramNode.o
	rm -f ProcedureCall.o
	rm -f SingleMethodCall.o
	rm -f Statements.o
	rm -f Val2Expression.o
	rm -f VariableValue.o
	rm -f myparser.lex.o
	rm -f myparser.y.o
	rm -f yywrap.o
	rm -f y.tab.h
	rm -f y.tab.c
	rm -f myparser.tab.h
	rm -f myparser.tab.c
	rm -f myparser.h
	rm -f myparser.y.c
	rm -f myparser.exe
	rm -f myparser.lex.c
	rm -f myparser.c
	rm -f y.output
	rm -f lex.yy.c
	rm -f CFunctions.o
	rm -f CInterpreter.o
	rm -f ClassDefinition.o
	rm -f DebugInfo.o
	rm -f Disassembler.o
	rm -f ExpressionNode.o
	rm -f ExpressionParser.o
	rm -f ExpressionThing.o
	rm -f HeapManager.o
	rm -f IfNode.o
	rm -f Parse.o
	rm -f parser.o
	rm -f PrintNode.o
	rm -f ProcedureCallNode.o
	rm -f ProcedureNode.o
	rm -f ProgramNode.o
	rm -f ReturnNode.o
	rm -f Statement.o
	rm -f myparser.exe.stackdump

test: myparser.exe
	./myparser.exe example.src
	
all: myparser.exe

